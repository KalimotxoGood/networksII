
//adjacency matrix representation of the graph

#include <stdio.h>
#include <limits.h>
#include <fstream>
#include <iostream>
using namespace std;

// Number of vertices in the graph
#define V 5

// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int parent[V][V];
int x = 0;
struct node {
    int currentnodenum;
    //int input[][];
    //int output[][];
    
    int routingtable[V][V];
};

int minDistance(int dist[], bool sptSet[])
{
    
    // Initialize min value
    int min = INT_MAX, min_index;
    
    for (int v = 0; v < V; v++)
    {
        if (sptSet[v] == false && dist[v] <= min)
        {
            
            min = dist[v], min_index = v;
            
        }
        
    }
    
    
return min_index;
    
    
}

// A utility function to print the constructed distance array
void printSolution(int dist[], int n)
{
    printf("Vertex  Shotest Distance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d \t \t %d\n", i, dist[i]);
}

// Function that implements Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void dijkstra(int graph[V][V], int src)
{
    int dist[V];     // The output array. dist[i] will hold the shortest
    // distance from src to i
    
    bool sptSet[V]; // sptSet[i] will be true if vertex i is included in shortest
    // path tree or shortest distance from src to i is finalized
    
    // Initialize all distances as INFINITE and stpSet[] as false
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;
    
    // Distance of source vertex from itself is always 0
    dist[src] = 0;
    
    // Find shortest path for all vertices
    
    for (int count = 0; count < V; count++)
    {
        int p = 0;
        // Pick the minimum distance vertex from the set of vertices not
        // yet processed. u is always equal to src in the first iteration.
        int u = minDistance(dist, sptSet);
        cout << u;
        //if (u == 4)
        //{
            //break;
        //}
        // Mark the picked vertex as processed
        sptSet[u] = true;
        
        
        // Update dist value of the adjacent vertices of the picked vertex.
        for (int v = 0; v < V; v++)
        {
           
            // Update dist[v] only if is not in sptSet, there is an edge from
            // u to v, and total weight of path from src to v through u is
            // smaller than current value of dist[v]
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
                && dist[u]+graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
        }
        
        
    }
    
    
    // print the constructed distance array
    printSolution(dist, V);
}

int printtoFile()
{
    int edges = 0;
    std::ofstream myfile("hi.txt");
    if(myfile.is_open())
    {
        myfile << "Num of Nodes" << "    " << "Num of Edges\n";
        myfile << "____________________________\n";
        myfile << "     " << V << "              " << edges;
        myfile << "____________________________\n";
        myfile << "Num of Nodes" << "    " << "Num of Edges\n";
        
        myfile.close();
    }
    else
    {
        std::cerr << "didn't write" << std::endl;
    }
    
   
    return 0;
}

void printGraph(int graph[V][V])
{
    
    for (int j = 0; j < V ; j++)
    {
        for(int i = 0; i < V; i++)
        {
            if ( i == V - 1)
            {
                cout<< graph[i][j];
            }
            else {
                cout<< graph[i][j] << "  ";
            }
        }
        cout << "\n";
     }
    
}


// driver program to test above function
int main()
{
   //printtoFile();
    /* Let us create the example graph discussed above */
    
   // cout << parent[0];
    //cout << parent[1];
    // cout << parent[2];
    
    int graph1[V][V];
    //for (int i = 0; i < 9; i++)
    //{
        //for(int j = 0; j < 9; j++)
            
       // {
           //graph1[i][j] = 0;           //add random links here
        //}
    //}
    
   // printGraph(graph1);
    
    
    int graph[V][V] = {{0, 4, 0, 2, 0},
                       {4, 0, 8, 0, 0},
                       {0, 8, 0, 7, 0},
                       {0, 0, 7, 0, 9},
                       {0, 0, 0, 9, 0},
                    };
   
    int graph2[2][2] = {{}};
    graph2[0][0] = 1;
    graph2[0][1] = 5;
    
   // cout << graph2[0][0] << "\n";
    
    dijkstra(graph, 0);
    cout << "\n";
    
    
    
    
        

    printGraph(graph);
    
    return 0;
}
